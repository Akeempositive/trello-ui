{"ast":null,"code":"import _objectSpread from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport { APP_ACCESS_TOKEN, APP_CLIENT, APP_PASS, GETMETHOD, POSTMETHOD, PUTMETHOD, DELETEMETHOD } from '../constants';\nexport var axiosRequest = function axiosRequest(options) {\n  var setHeader = {};\n\n  if (options.useBasic) {\n    var tempHeaders = {\n      Authorization: \"\".concat(getBasicAuth(APP_CLIENT, APP_PASS))\n    };\n    setHeader = _objectSpread({}, setHeader, tempHeaders);\n  }\n\n  if (options.useAppAccessToken && localStorage.getItem(APP_ACCESS_TOKEN)) {\n    var _tempHeaders = {\n      Authorization: \"Bearer \".concat(localStorage.getItem(APP_ACCESS_TOKEN))\n    };\n    setHeader = _objectSpread({}, setHeader, _tempHeaders);\n  }\n\n  if (options.headerType) {\n    var _tempHeaders2 = {\n      'Content-Type': options.headerType\n    };\n    setHeader = _objectSpread({}, setHeader, _tempHeaders2);\n  } // if(options.useClientToken){\n  //     let tempHeaders={Authorization:`Bearer ${getClientToken()}`}\n  //     setHeader = {...setHeader, ...tempHeaders}\n  // }\n\n\n  options.headerRequest = {\n    header: setHeader\n  };\n  options.headerRequest.data = {};\n  console.log(\"options.headerRequest\");\n  console.log(options.headerRequest);\n  var apiRequest = null;\n\n  switch (options.method) {\n    case GETMETHOD:\n      apiRequest = axios.get(options.url, options.headerRequest);\n      break;\n\n    case POSTMETHOD:\n      apiRequest = axios.post(options.url, options.data, options.headerRequest);\n      break;\n\n    case PUTMETHOD:\n      apiRequest = axios.put(options.url, options.data, options.headerRequest);\n      break;\n\n    default:\n      apiRequest = null;\n  }\n\n  return apiRequest;\n};\n\nvar getBasicAuth = function getBasicAuth(username, password) {\n  var hash = new Buffer(username + ':' + password).toString('base64');\n  console.log(hash);\n  return \"Basic \" + hash;\n};","map":{"version":3,"sources":["/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/src/utils/api-utils.js"],"names":["axios","APP_ACCESS_TOKEN","APP_CLIENT","APP_PASS","GETMETHOD","POSTMETHOD","PUTMETHOD","DELETEMETHOD","axiosRequest","options","setHeader","useBasic","tempHeaders","Authorization","getBasicAuth","useAppAccessToken","localStorage","getItem","headerType","headerRequest","header","data","console","log","apiRequest","method","get","url","post","put","username","password","hash","Buffer","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,EAA0BC,UAA1B,EAAsCC,QAAtC,EAAgDC,SAAhD,EAA0DC,UAA1D,EAAqEC,SAArE,EAA+EC,YAA/E,QAAkG,cAAlG;AAEC,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,OAAO,EAAG;AACnC,MAAIC,SAAS,GAAG,EAAhB;;AAGA,MAAID,OAAO,CAACE,QAAZ,EAAsB;AAClB,QAAIC,WAAW,GAAC;AAACC,MAAAA,aAAa,YAAIC,YAAY,CAACZ,UAAD,EAAaC,QAAb,CAAhB;AAAd,KAAhB;AACAO,IAAAA,SAAS,qBAAOA,SAAP,EAAqBE,WAArB,CAAT;AACH;;AAED,MAAIH,OAAO,CAACM,iBAAR,IAA6BC,YAAY,CAACC,OAAb,CAAqBhB,gBAArB,CAAjC,EAAyE;AACrE,QAAIW,YAAW,GAAG;AAACC,MAAAA,aAAa,mBAAWG,YAAY,CAACC,OAAb,CAAqBhB,gBAArB,CAAX;AAAd,KAAlB;AACAS,IAAAA,SAAS,qBAAOA,SAAP,EAAqBE,YAArB,CAAT;AACH;;AAED,MAAGH,OAAO,CAACS,UAAX,EAAsB;AAClB,QAAIN,aAAW,GAAG;AAAC,sBAAiBH,OAAO,CAACS;AAA1B,KAAlB;AACAR,IAAAA,SAAS,qBAAOA,SAAP,EAAqBE,aAArB,CAAT;AACH,GAjBkC,CAqBnC;AACA;AACA;AACA;;;AAEAH,EAAAA,OAAO,CAACU,aAAR,GAAwB;AAACC,IAAAA,MAAM,EAACV;AAAR,GAAxB;AACAD,EAAAA,OAAO,CAACU,aAAR,CAAsBE,IAAtB,GAA6B,EAA7B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAYd,OAAO,CAACU,aAApB;AAEA,MAAIK,UAAU,GAAG,IAAjB;;AAEA,UAAQf,OAAO,CAACgB,MAAhB;AACI,SAAKrB,SAAL;AACIoB,MAAAA,UAAU,GAAGxB,KAAK,CAAC0B,GAAN,CAAUjB,OAAO,CAACkB,GAAlB,EAAsBlB,OAAO,CAACU,aAA9B,CAAb;AACJ;;AAEA,SAAKd,UAAL;AACImB,MAAAA,UAAU,GAAExB,KAAK,CAAC4B,IAAN,CAAWnB,OAAO,CAACkB,GAAnB,EAAwBlB,OAAO,CAACY,IAAhC,EAAsCZ,OAAO,CAACU,aAA9C,CAAZ;AACJ;;AAEA,SAAKb,SAAL;AACIkB,MAAAA,UAAU,GAAExB,KAAK,CAAC6B,GAAN,CAAUpB,OAAO,CAACkB,GAAlB,EAAuBlB,OAAO,CAACY,IAA/B,EAAoCZ,OAAO,CAACU,aAA5C,CAAZ;AACJ;;AAEA;AACEK,MAAAA,UAAU,GAAG,IAAb;AAdN;;AAiBA,SAAOA,UAAP;AAEH,CAtDO;;AAwDR,IAAMV,YAAY,GAAG,SAAfA,YAAe,CAACgB,QAAD,EAAWC,QAAX,EAAwB;AACzC,MAAMC,IAAI,GAAG,IAAIC,MAAJ,CAAWH,QAAQ,GAAG,GAAX,GAAiBC,QAA5B,EAAsCG,QAAtC,CAA+C,QAA/C,CAAb;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYS,IAAZ;AACA,SAAO,WAAWA,IAAlB;AACH,CAJD","sourcesContent":["import axios from 'axios';\nimport {APP_ACCESS_TOKEN, APP_CLIENT, APP_PASS, GETMETHOD,POSTMETHOD,PUTMETHOD,DELETEMETHOD} from '../constants'\n\n export const axiosRequest = options =>{\n    let setHeader = {}\n    \n\n    if (options.useBasic) {\n        let tempHeaders={Authorization:`${getBasicAuth(APP_CLIENT, APP_PASS)}`}\n        setHeader = {...setHeader, ...tempHeaders}\n    }\n\n    if (options.useAppAccessToken && localStorage.getItem(APP_ACCESS_TOKEN)) {\n        let tempHeaders = {Authorization:`Bearer ${localStorage.getItem(APP_ACCESS_TOKEN)}`}\n        setHeader = {...setHeader, ...tempHeaders}\n    }\n\n    if(options.headerType){\n        let tempHeaders = {'Content-Type' : options.headerType}\n        setHeader = {...setHeader, ...tempHeaders}\n    }\n\n    \n\n    // if(options.useClientToken){\n    //     let tempHeaders={Authorization:`Bearer ${getClientToken()}`}\n    //     setHeader = {...setHeader, ...tempHeaders}\n    // }\n\n    options.headerRequest = {header:setHeader}\n    options.headerRequest.data = {}\n\n    console.log(\"options.headerRequest\");\n\n    console.log(options.headerRequest);\n\n    let apiRequest = null;\n\n    switch (options.method) {\n        case GETMETHOD:\n            apiRequest = axios.get(options.url,options.headerRequest)\n        break;\n        \n        case POSTMETHOD:\n            apiRequest= axios.post(options.url, options.data, options.headerRequest);\n        break;\n        \n        case PUTMETHOD:\n            apiRequest= axios.put(options.url, options.data,options.headerRequest);\n        break;\n\n        default:\n          apiRequest = null;\n    }\n\n    return apiRequest;\n\n}\n\nconst getBasicAuth = (username, password) => {\n    const hash = new Buffer(username + ':' + password).toString('base64');\n    console.log(hash);\n    return \"Basic \" + hash;\n};"]},"metadata":{},"sourceType":"module"}