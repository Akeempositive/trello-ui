{"ast":null,"code":"import \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport _objectSpread from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/src/common/public.js\";\nimport React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport Login from '../pages/login/login';\nimport Signup from '../pages/signup/signup';\n\nvar PublicRoute =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PublicRoute, _Component);\n\n  function PublicRoute(props) {\n    var _this;\n\n    _classCallCheck(this, PublicRoute);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PublicRoute).call(this, props));\n\n    _this.onSubmitExperience = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFields(function (err, values) {\n        if (!err) {\n          var loginRequest = Object.assign({}, values);\n          console.log(values);\n          var loginRequests = values;\n          console.log(loginRequest);\n          loginRequest.data = {};\n          console.log(loginRequest);\n\n          var logReq = _objectSpread({}, values);\n\n          console.log(logReq);\n          login(values).then(function (response) {\n            console.log(response);\n\n            _notification['success']({\n              message: 'MEDTHREAT',\n              description: 'Successfully Logged In.'\n            });\n\n            _this.props.form.resetFields(); // this.setState({redirectMe: {\n            //     status:true,\n            //     path:'/dashboard'\n            //     }\n            // })\n\n\n            _this.setRoute(\"dashboard\");\n          }).catch(function (error) {\n            if (error.response) {\n              console.log(error.response);\n\n              if (error.response.status == 400) {\n                _notification['error']({\n                  message: 'MEDTHREAT',\n                  description: \"Username/Password Incorrect.\"\n                });\n\n                console.log(error.response.status);\n              } else {\n                _notification['error']({\n                  message: 'MEDTHREAT',\n                  description: \"An Error occured .\"\n                });\n\n                console.log(error.response.status);\n              }\n            }\n          });\n        }\n      });\n    };\n\n    _this.setRoute = function (path) {\n      _this.setState({\n        redirectMe: {\n          status: true,\n          path: \"/\".concat(path)\n        }\n      });\n    };\n\n    _this.state = {\n      redirectMe: {\n        status: false,\n        path: ''\n      }\n    };\n    _this.onSubmitExperience = _this.onSubmitExperience.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PublicRoute, [{\n    key: \"render\",\n    value: function render() {\n      if (this.state.redirectMe.status) {\n        console.log(\"Reiercting\");\n        return React.createElement(Redirect, {\n          to: this.state.redirectMe.path,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: Login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/sign-up\",\n        component: Signup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PublicRoute;\n}(Component);\n\nexport default PublicRoute;","map":{"version":3,"sources":["/Users/ddada/Documents/danpersonal/livejavaproject/medthreat/medthreat-ui2/src/common/public.js"],"names":["React","Component","Redirect","Route","Login","Signup","PublicRoute","props","onSubmitExperience","e","preventDefault","form","validateFields","err","values","loginRequest","Object","assign","console","log","loginRequests","data","logReq","login","then","response","message","description","resetFields","setRoute","catch","error","status","path","setState","redirectMe","state","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { notification} from 'antd';\nimport Login from '../pages/login/login';\nimport Signup from '../pages/signup/signup'\n\nclass PublicRoute extends Component  {\n    constructor(props) {\n        super(props);\n        this.state = {\n            redirectMe: {\n                status:false,\n                path:''\n            }\n           }\n        this.onSubmitExperience = this.onSubmitExperience.bind(this);\n\n    }\n\n    onSubmitExperience = (e) => {\n        e.preventDefault();\n\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const loginRequest = Object.assign({}, values);\n                console.log(values);\n                let loginRequests=values;\n                console.log(loginRequest);\n                loginRequest.data={};\n                console.log(loginRequest);\n                const logReq = {...values};\n                console.log(logReq);\n                login(values)\n                .then(response=>{\n                    console.log(response);\n                    notification['success']({\n                        message: 'MEDTHREAT',\n                        description:\n                          'Successfully Logged In.',\n                      });\n\n\n                    this.props.form.resetFields();\n                    // this.setState({redirectMe: {\n                    //     status:true,\n                    //     path:'/dashboard'\n                    //     }\n                    // })\n                    this.setRoute(\"dashboard\")\n                }).\n                catch((error)=> {\n                    if(error.response){\n                      console.log(error.response);\n                      if(error.response.status == 400){\n                        notification['error']({\n                            message: 'MEDTHREAT',\n                            description:\n                              `Username/Password Incorrect.`,\n                          });\n                            console.log(error.response.status);\n                      }else{\n                        notification['error']({\n                            message: 'MEDTHREAT',\n                            description:\n                              `An Error occured .`,\n                          });\n                          \n                        console.log(error.response.status);\n                      }\n                    }\n                });\n        \n            }\n        });\n    }\n\n    setRoute=(path)=>{\n        this.setState({redirectMe: {\n                status:true,\n                path:`/${path}`\n            }\n        })\n    }\n\n  render() {\n    if(this.state.redirectMe.status){\n        console.log(\"Reiercting\");\n        return <Redirect to={this.state.redirectMe.path} />\n    }\n\n    return (\n        <div>\n            <Route exact path='/' component={Login} />\n            <Route exact path='/sign-up' component={Signup} />\n        </div>\n    );\n  }\n}\n\nexport default PublicRoute;"]},"metadata":{},"sourceType":"module"}