{"ast":null,"code":"import { API_BASE_URL, APP_CLIENT, APP_PASS, PAGE_SIZE, CLIENT_TOKEN, GETMETHOD, POSTMETHOD, PUTMETHOD } from '../../constants';\nimport { axiosLoginRequest, storeJwtAccessToken, storeJwtExpireToken } from '../../utils/api-utils';\nimport axios from 'axios';\nexport function login(loginRequest) {\n  loginRequest.grant_type = 'password';\n  loginRequest.scope = 'profile';\n  var formBody = [];\n\n  for (var property in loginRequest) {\n    var encodedKey = encodeURIComponent(property);\n    var encodedValue = encodeURIComponent(loginRequest[property]);\n    formBody.push(\"\".concat(encodedKey, \"=\").concat(encodedValue));\n  } // const formData = new FormData();\n  // for (let property in loginRequest) {\n  //     let formDataKey = property;\n  //     let formDataValue = loginRequest[property];\n  //     formData.append(formDataKey,formDataValue )\n  // }\n\n\n  formBody = formBody.join('&');\n  console.log(formBody); // let head = {headers:{\"Authorization\": \"Basic bWVkdGhyZWF0OjEyMzQ1Ng==\",'Content-Type': \"application/x-www-form-urlencoded\"}, data:{}}\n  // console.log(head);\n  // return axios.post(API_BASE_URL + '/oauth/token',formBody, head)\n  // options.url, options.data, options.headerRequest\n\n  return axiosLoginRequest({\n    url: API_BASE_URL + '/api/auth/login',\n    method: POSTMETHOD,\n    data: {\n      email: loginRequest.email,\n      password: loginRequest.password\n    },\n    // headerType: 'application/json'\n    headerType: 'application/json'\n  });\n}\nexport var storeToken = function storeToken(token) {\n  storeJwtAccessToken(token.access_token);\n  storeJwtExpireToken(token.expires_in);\n};","map":{"version":3,"sources":["C:\\Users\\Positive\\Documents\\Projects\\trello-ui\\src\\pages\\login\\login-api.js"],"names":["API_BASE_URL","APP_CLIENT","APP_PASS","PAGE_SIZE","CLIENT_TOKEN","GETMETHOD","POSTMETHOD","PUTMETHOD","axiosLoginRequest","storeJwtAccessToken","storeJwtExpireToken","axios","login","loginRequest","grant_type","scope","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","console","log","url","method","data","email","password","headerType","storeToken","token","access_token","expires_in"],"mappings":"AAAA,SAAQA,YAAR,EAAsBC,UAAtB,EAAkCC,QAAlC,EAA4CC,SAA5C,EAAuDC,YAAvD,EAAoEC,SAApE,EAA8EC,UAA9E,EAAyFC,SAAzF,QAAyG,iBAAzG;AACA,SAAQC,iBAAR,EAA0BC,mBAA1B,EAA8CC,mBAA9C,QAAyE,uBAAzE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAIA,OAAO,SAASC,KAAT,CAAeC,YAAf,EAA6B;AAChCA,EAAAA,YAAY,CAACC,UAAb,GAA0B,UAA1B;AACAD,EAAAA,YAAY,CAACE,KAAb,GAAqB,SAArB;AAEA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,QAAT,IAAqBJ,YAArB,EAAmC;AAC/B,QAAIK,UAAU,GAAGC,kBAAkB,CAACF,QAAD,CAAnC;AACA,QAAIG,YAAY,GAAGD,kBAAkB,CAACN,YAAY,CAACI,QAAD,CAAb,CAArC;AACAD,IAAAA,QAAQ,CAACK,IAAT,WAAiBH,UAAjB,cAA+BE,YAA/B;AACH,GAT+B,CAWhC;AAEA;AACA;AACA;AACA;AACA;;;AACAJ,EAAAA,QAAQ,GAAGA,QAAQ,CAACM,IAAT,CAAc,GAAd,CAAX;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAZ,EAnBgC,CAqBhC;AACA;AACA;AAEA;;AACA,SAAOR,iBAAiB,CAAC;AACrBiB,IAAAA,GAAG,EAAEzB,YAAY,GAAG,iBADC;AAErB0B,IAAAA,MAAM,EAAEpB,UAFa;AAGrBqB,IAAAA,IAAI,EAAE;AAACC,MAAAA,KAAK,EAAEf,YAAY,CAACe,KAArB;AAA4BC,MAAAA,QAAQ,EAAEhB,YAAY,CAACgB;AAAnD,KAHe;AAIrB;AAEAC,IAAAA,UAAU,EAAE;AANS,GAAD,CAAxB;AAQH;AAED,OAAO,IAAMC,UAAU,GAAE,SAAZA,UAAY,CAACC,KAAD,EAAU;AAC/BvB,EAAAA,mBAAmB,CAACuB,KAAK,CAACC,YAAP,CAAnB;AACAvB,EAAAA,mBAAmB,CAACsB,KAAK,CAACE,UAAP,CAAnB;AACH,CAHM","sourcesContent":["import {API_BASE_URL, APP_CLIENT, APP_PASS, PAGE_SIZE, CLIENT_TOKEN,GETMETHOD,POSTMETHOD,PUTMETHOD} from '../../constants';\r\nimport {axiosLoginRequest,storeJwtAccessToken,storeJwtExpireToken} from  '../../utils/api-utils'\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport function login(loginRequest) {\r\n    loginRequest.grant_type = 'password';\r\n    loginRequest.scope = 'profile';\r\n\r\n    let formBody = [];\r\n    for (let property in loginRequest) {\r\n        let encodedKey = encodeURIComponent(property);\r\n        let encodedValue = encodeURIComponent(loginRequest[property]);\r\n        formBody.push(`${encodedKey}=${encodedValue}`);\r\n    }\r\n\r\n    // const formData = new FormData();\r\n\r\n    // for (let property in loginRequest) {\r\n    //     let formDataKey = property;\r\n    //     let formDataValue = loginRequest[property];\r\n    //     formData.append(formDataKey,formDataValue )\r\n    // }\r\n    formBody = formBody.join('&');\r\n    console.log(formBody);\r\n\r\n    // let head = {headers:{\"Authorization\": \"Basic bWVkdGhyZWF0OjEyMzQ1Ng==\",'Content-Type': \"application/x-www-form-urlencoded\"}, data:{}}\r\n    // console.log(head);\r\n    // return axios.post(API_BASE_URL + '/oauth/token',formBody, head)\r\n\r\n    // options.url, options.data, options.headerRequest\r\n    return axiosLoginRequest({\r\n        url: API_BASE_URL + '/api/auth/login',\r\n        method: POSTMETHOD,\r\n        data: {email: loginRequest.email, password: loginRequest.password},\r\n        // headerType: 'application/json'\r\n\r\n        headerType: 'application/json'\r\n    });\r\n}\r\n\r\nexport const storeToken= (token) =>{\r\n    storeJwtAccessToken(token.access_token);\r\n    storeJwtExpireToken(token.expires_in)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}